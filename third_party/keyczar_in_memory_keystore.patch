commit 3a10b03b4b14883dace4443591989c04de404381
Author: Victor <vgm.maraccini@gmail.com>
Date:   Sun Nov 8 18:17:13 2015 -0200

    Added in-memory store

diff --git a/src/keyczar-cpp/src/keyczar/build.scons b/src/keyczar-cpp/src/keyczar/build.scons
index f9df79a..c76448e 100644
--- a/src/keyczar-cpp/src/keyczar/build.scons
+++ b/src/keyczar-cpp/src/keyczar/build.scons
@@ -111,6 +111,7 @@ rw_sources = [
     'rw/keyset_encrypted_file_writer.cc',
     'rw/keyset_file_reader.cc',
     'rw/keyset_file_writer.cc',
+    'rw/keyset_in_memory_reader.cc',
     'rw/keyset_reader.cc',
     'rw/keyset_writer.cc',
 ]
diff --git a/src/keyczar-cpp/src/keyczar/rw/keyset_in_memory_reader.cc b/src/keyczar-cpp/src/keyczar/rw/keyset_in_memory_reader.cc
new file mode 100644
index 0000000..b3482d4
--- /dev/null
+++ b/src/keyczar-cpp/src/keyczar/rw/keyset_in_memory_reader.cc
@@ -0,0 +1,158 @@
+// Copyright 2015 Victor Maraccini
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+#include <keyczar/rw/keyset_in_memory_reader.h>
+
+#include <keyczar/base/stl_util-inl.h>
+#include <keyczar/base/json_value_serializer.h>
+#include <keyczar/base/scoped_ptr.h>
+#include <keyczar/base/string_util.h>
+#include <keyczar/crypto_factory.h>
+#include <keyczar/key_util.h>
+#include <keyczar/pbe_impl.h>
+
+namespace {
+
+static const std::string base64_chars = 
+             "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+             "abcdefghijklmnopqrstuvwxyz"
+             "0123456789+/";
+
+static inline bool is_base64(unsigned char c) {
+  return (isalnum(c) || (c == '+') || (c == '/'));
+}
+
+std::string base64_decode(std::string const& encoded_string) {
+  int in_len = encoded_string.size();
+  int i = 0;
+  int j = 0;
+  int in_ = 0;
+  unsigned char char_array_4[4], char_array_3[3];
+  std::string ret;
+
+  while (in_len-- && ( encoded_string[in_] != '=') && is_base64(encoded_string[in_])) {
+    char_array_4[i++] = encoded_string[in_]; in_++;
+    if (i ==4) {
+      for (i = 0; i <4; i++)
+        char_array_4[i] = base64_chars.find(char_array_4[i]);
+
+      char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
+      char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
+      char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];
+
+      for (i = 0; (i < 3); i++)
+        ret += char_array_3[i];
+      i = 0;
+    }
+  }
+
+  if (i) {
+    for (j = i; j <4; j++)
+      char_array_4[j] = 0;
+
+    for (j = 0; j <4; j++)
+      char_array_4[j] = base64_chars.find(char_array_4[j]);
+
+    char_array_3[0] = (char_array_4[0] << 2) + ((char_array_4[1] & 0x30) >> 4);
+    char_array_3[1] = ((char_array_4[1] & 0xf) << 4) + ((char_array_4[2] & 0x3c) >> 2);
+    char_array_3[2] = ((char_array_4[2] & 0x3) << 6) + char_array_4[3];
+
+    for (j = 0; (j < i - 1); j++) ret += char_array_3[j];
+  }
+
+  return ret;
+}
+
+Value* ReadBase64String(const std::string& base64String) {
+  keyczar::base::ScopedSafeString json_string(new std::string(base64_decode(base64String)));
+  keyczar::base::JSONStringValueSerializer json_serializer(json_string.get());
+  std::string error;
+  scoped_ptr<Value> root(json_serializer.Deserialize(&error));
+  if (root.get() == NULL) {
+    LOG(ERROR) << error;
+    return NULL;
+  }
+  return root.release();
+}
+
+}  // namespace
+
+namespace keyczar {
+namespace rw {
+
+static Value* DecryptPBEKey(const DictionaryValue& pbe_value,
+                            const std::string& password) {
+  std::string cipher_string;
+  if (!pbe_value.GetString("cipher", &cipher_string))
+    return NULL;
+  const PBEImpl::CipherAlgorithm cipher = PBEImpl::GetCipher(cipher_string);
+  if (cipher == PBEImpl::UNDEF_CIPHER)
+    return NULL;
+
+  std::string hmac_string;
+  if (!pbe_value.GetString("hmac", &hmac_string))
+    return NULL;
+  const PBEImpl::HMACAlgorithm hmac = PBEImpl::GetHMAC(hmac_string);
+  if (hmac == PBEImpl::UNDEF_HMAC)
+    return NULL;
+
+  int iteration_count;
+  if (!pbe_value.GetInteger("iterationCount", &iteration_count))
+    return NULL;
+
+  std::string salt;
+  if (!util::DeserializeString(pbe_value, "salt", &salt))
+    return NULL;
+
+  std::string iv;
+  if (!util::DeserializeString(pbe_value, "iv", &iv))
+    return NULL;
+
+  std::string encrypted_key;
+  if (!util::DeserializeString(pbe_value, "key", &encrypted_key))
+    return NULL;
+
+  scoped_ptr<PBEImpl> pbe_impl(
+    CryptoFactory::CreatePBE(cipher, hmac, iteration_count, password));
+  if (pbe_impl.get() == NULL)
+    return NULL;
+
+  std::string decrypted_key;
+  if (!pbe_impl->Decrypt(salt, iv, encrypted_key, &decrypted_key))
+    return NULL;
+
+  base::JSONStringValueSerializer json_serializer(decrypted_key);
+  std::string error;
+  scoped_ptr<Value> key_value(json_serializer.Deserialize(&error));
+  if (key_value.get() == NULL) {
+    LOG(ERROR) << error;
+    return NULL;
+  }
+  return key_value.release();
+}
+
+KeysetMemoryReader::KeysetMemoryReader(const std::string& base64Meta, const std::string& base64Key) {
+  encodedMeta = base64Meta;
+  encodedKey = base64Key;
+}
+
+Value* KeysetMemoryReader::ReadMetadata() const {
+  return ReadBase64String(encodedMeta);
+}
+
+Value* KeysetMemoryReader::ReadKey(int ignore) const {
+  return ReadBase64String(encodedKey);
+}
+
+}  // namespace rw
+}  // namespace keyczar
diff --git a/src/keyczar-cpp/src/keyczar/rw/keyset_in_memory_reader.h b/src/keyczar-cpp/src/keyczar/rw/keyset_in_memory_reader.h
new file mode 100644
index 0000000..05ed635
--- /dev/null
+++ b/src/keyczar-cpp/src/keyczar/rw/keyset_in_memory_reader.h
@@ -0,0 +1,50 @@
+// Copyright 2015 Victor Maraccini
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+#ifndef KEYCZAR_RW_KEYSET_IN_MEMORY_READER_H_
+#define KEYCZAR_RW_KEYSET_IN_MEMORY_READER_H_
+
+#include <string>
+
+#include <keyczar/base/basictypes.h>
+#include <keyczar/base/stl_util-inl.h>
+#include <keyczar/base/values.h>
+#include <keyczar/rw/keyset_reader.h>
+
+namespace keyczar {
+namespace rw {
+
+// A class reading key sets from base64 encoded JSON strings.
+class KeysetMemoryReader : public KeysetReader {
+ public:
+  // Initializes the reader with the Base64-encoded JSON data of Meta and Key.
+  // Only 1 key is available in this reader.
+  explicit KeysetMemoryReader(const std::string& base64Meta, const std::string& base64Key);
+
+  // Read the metadata. The caller takes ownership of the returned value.
+  virtual Value* ReadMetadata() const;
+
+  // Read the key. The caller takes ownership of the returned value. Version is ignored.
+  virtual Value* ReadKey(int version) const;
+
+ private:
+  std::string encodedMeta;
+  std::string encodedKey;
+
+  DISALLOW_COPY_AND_ASSIGN(KeysetMemoryReader);
+};
+
+}  // namespace rw
+}  // namespace keyczar
+
+#endif  // KEYCZAR_RW_KEYSET_IN_MEMORY_READER_H_
